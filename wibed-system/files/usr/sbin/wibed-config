#!/usr/bin/lua

local crc = require "crc16"
local fs  = require "nixio.fs"
local uci = require "uci"
local iw  = require "iwinfo"
local util = require "util"
local ucic = "wibed"
local x = uci:cursor()

local function node_id()
	local dev = "eth0"
	local mac = assert(fs.readfile("/sys/class/net/"..dev.."/address"))
	local hash = crc.hash(mac)
	return math.floor(hash / 256), hash % 256
end

local function shell(cmd, raw)
	local f = assert(io.popen(cmd, 'r'))
	local s = assert(f:read('*a'))
	f:close()
	if raw then return s end
	s = string.gsub(s, '^%s+', '')
	s = string.gsub(s, '%s+$', '')
	s = string.gsub(s, '[\n\r]+', ' ')
	return s
end

local function readfile(file)
	local f = io.open(file,"r")
	local content = nil
	if f ~= nil then
		content = f:read('*a')
		f:close()
	end
	return content
end

local function get_model()
	local model = readfile("/tmp/sysinfo/board_name")
	if model == nil then
		model = shell("uname -m",true).."-"..shell("uname -p",true)
	end
	return model
end

local function hex(x) return string.format("%02x", x) end

local function generate_address()
	local r1, r2 = node_id()
	local ipv4_template = assert(x:get(ucic, "management", "ipv4_net"))
	local ipv6_template = assert(x:get(ucic, "management", "ipv6_net"))

	return ipv4_template:gsub("R1", r1):gsub("R2", r2),
	       ipv6_template:gsub("R1", hex(r1)):gsub("R2", hex(r2)) 
-- XXX: id should be hex coded but for backwards compat keep it decimal
end

local function generate_mgmt_lan_address()
	local r1, r2 = node_id()
	local ipv4_template = assert(x:get(ucic, "management", "ipv4_lan_net"))
	return ipv4_template:gsub("R1", r1):gsub("R2", r2)
end

local function generate_ssid()
	local id = assert(x:get(ucic, "management", "ssid"))
	local r1, r2 = node_id()
	return string.format("%s-%02x%02x", id, r1, r2)
end

local function get_bssid()
	return x:get(ucic, "management","bssid") or "02:CA:FF:EE:BA:BE"
end

local function printf(fmt, ...)
	print(string.format(fmt, ...))
end

local function printr(r)
	local i,v
	for i,v in ipairs(r) do
		printf("%d -> %s",i,v)
	end
end

local function is_net(dev)
	local r = os.execute(string.format("ls /sys/class/net/%s >/dev/null 2>&1",dev))
	return r==0
end

local function is_wifi(dev)
	local r1 = os.execute(string.format("ls /sys/class/net/%s/phy80211/ >/dev/null 2>&1",dev))
	local r2 = os.execute("uci show wireless | grep ifname | grep "..dev)
	return (r1==0 or r2==0)
end

local function reset_wifi()
	print("Reconfiguring wifi devices...")
	os.execute('echo "" > /etc/config/wireless')
	os.execute('wifi detect > /etc/config/wireless')
end

local function wifi_up()
	os.execute("wifi")
end

local function split_ifaces(ifaces)
	local _,i
	local et = {}
	local wi = {}
	for _,i in ipairs(ifaces) do
		if x:get("wireless",i) == "wifi-device" then
			table.insert(wi,i)
		--else if is_net(i) then
		else
			table.insert(et,i)
		 --end
		end
	end
	return et,wi
end

local function set_batadv(dev)
	printf("-> Configuring batman-adv for %s ",dev)
	local ifn = "bat"..dev
	x:set("batman-adv","bat0","mesh")
	x:set("batman-adv","bat0","bridge_loop_avoidance","1")
	x:set("network",ifn,"interface")
--	x:set("network",ifn,"ifname",dev)
	x:set("network",ifn,"proto","batadv")
	x:set("network",ifn,"mesh","bat0")
	if is_wifi(dev) then
		x:set("network",ifn,"mtu","1528")
	end
end

local function set_mgmt_net()
	print("Configuring management network devices")
	local ifaces,_ = split_ifaces(x:get(ucic, "management", "ifaces"))
	table.insert(ifaces,"bat0")
	local ipv4, ipv6 = generate_address()

	x:set("network", "mgmt", "interface")
	x:set("network", "mgmt", "type","bridge")
	x:set("network", "mgmt", "proto", "static")
	x:set("network", "mgmt", "ipaddr", ipv4)
	x:set("network", "mgmt", "netmask", "255.255.0.0")
	x:set("network", "mgmt", "ip6addr", ipv6)
	x:set("network", "mgmt", "ifname", ifaces)
end
	
local function set_mgmt_lan()
	if x:get("wibed","management","is_gw") == "1" then
		print("Configuring node as Internet gateway...")
		local ipv4 = generate_mgmt_lan_address()
		x:set("network", "mgmt_lan", "interface")
		x:set("network", "mgmt_lan", "proto", "static")
		x:set("network", "mgmt_lan", "ipaddr", ipv4)
		x:set("network", "mgmt_lan", "netmask", "255.255.255.0")
		x:set("network", "mgmt_lan", "ifname", "br-mgmt")
	
		x:set("dhcp","mgmt_lan","dhcp")
		x:set("dhcp","mgmt_lan","interface","mgmt_lan")
		x:set("dhcp","mgmt_lan","start","2")
		x:set("dhcp","mgmt_lan","limit","250")
		x:set("dhcp","mgmt_lan","leasetime","1h")
		
		x:foreach("firewall", "zone", function(s)
			if x:get("firewall",s[".name"],"name") == "lan" then
				 x:set("firewall",s[".name"],"network",{"mgmt_lan"})
			end
		end)
	else
		x:set("network", "mgmt_lan", "interface")
		x:set("network", "mgmt_lan", "proto", "dhcp")
		x:set("network", "mgmt_lan", "ifname", "br-mgmt")
	end
	
	x:foreach("firewall", "zone", function(s) x:set("firewall", s[".name"],"input","ACCEPT") end)
	x:foreach("firewall", "zone", function(s) x:set("firewall", s[".name"],"output","ACCEPT") end)
	x:foreach("firewall", "zone", function(s) x:set("firewall", s[".name"],"forward","ACCEPT") end)
end

local function set_system()
	print("Configuring system...")
	-- Setting hostname
	local r1, r2 = node_id()
	local hostname = string.format("wibed-%02x%02x", r1, r2)

	x:foreach("system", "system", function(s)
		x:set("system", s[".name"], "hostname", hostname)
	end)

	fs.writefile("/proc/sys/kernel/hostname", hostname)

	-- Setting model name
	x:set(ucic,"upgrade","model",get_model())
	x:set(ucic,"general","status","1")
	x:set(ucic,"general","node_id",hostname)
end


local function clean()
	print("Clearing wireless config...")
	x:foreach("wireless", "wifi-iface", function(s) x:delete("wireless", s[".name"]) end)

	print("Clearing network config...")
	x:foreach("network", "interface", function(s)
		if s[".name"]:match("^mgmt") or s[".name"]:match("^lan") or s[".name"]:match("^bat") then
			x:delete("network", s[".name"])
		end
	end)
end

local function exec_hooks()
	-- TODO
	print("Executing hooks ...")
	local hooks = {"a","b"}
	local _, p
	for _, p in ipairs(hooks) do
		local cmd = string.format("sh /etc/wibed/hooks/%s.sh")
		printf("-> Calling %s", cmd)
		os.execute(cmd)
	end
end

local function set_mgmt_wifi()
	print("Configuring management wifi devices")
	local channel5 = assert(x:get(ucic, "management", "channel5"))
	local ch = assert(x:get(ucic, "management", "channel2"))
	local i
	local _,ifaces = split_ifaces(x:get(ucic, "management", "ifaces"))	
	local wifi_num = 0

	for _,i in ipairs(ifaces) do
		local id = string.format("mgmt%d", wifi_num)
		local net = "bat"..id

		local t = iw.type(i)
		if t then
			local is_5ghz = iw[t].hwmodelist(i).a

			if is_5ghz then ch=channel5 end
			if not ch then
				printf("-> No channel defined for %dGHz %s", is_5ghz and 5 or 2, i)
				return
			end
	
			local ht = ch:match("[-+]?$")
	
			printf("-> Using channel %s for %dGHz %s", ch, is_5ghz and 5 or 2, i)
			x:set("wireless", i, "channel", (ch:gsub("[-+]$", "")))
	
			if x:get("wireless", i, "ht_capab") then
				if ht == "+" or ht == "-" then
					x:set("wireless", i, "htmode", "HT40"..ht)
				else
					x:set("wireless", i, "htmode", "HT20")
				end
			end
	
			x:set("wireless", i, "disabled", 0)
			x:set("wireless", id, "wifi-iface")
			x:set("wireless", id, "ssid", generate_ssid())
			x:set("wireless", id, "bssid", get_bssid())
			x:set("wireless", id, "device", i)
			x:set("wireless", id, "network", net)
			x:set("wireless", id, "mode", "adhoc")
			x:set("wireless", id, "ifname", id)

			set_batadv(id)
	
			wifi_num = wifi_num + 1
			else printf("-> Error, device %s not found as WiFi interface", i)
		end	
	end
end

function main()
	reset_wifi()
	clean()
	set_mgmt_wifi()
	set_mgmt_net()
	set_mgmt_lan()
	set_system()

	print("Committing config files...")
	x:save("network")
	x:save("batman-adv")
	x:save(ucic)
	x:save("system")
	x:save("wireless")
	x:commit("network")
	x:commit("batman-adv")
	x:commit("wireless")
	x:commit("firewall")
	x:commit("dhcp")
	x:commit(ucic)
	x:commit("system")
end

main()
