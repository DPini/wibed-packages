#!/usr/bin/lua

local crc = require "crc16"
local fs  = require "nixio.fs"
local uci = require "uci"
local iw  = require "iwinfo"
local util = require "util"
local ucic = "wibed"
local ucil = "libremap"
local x = uci:cursor()


function string:split_str( inSplitPattern, outResults )
        if not outResults then
                outResults = { }
        end
        local theStart = 1
        local theSplitStart, theSplitEnd = string.find( self, inSplitPattern, theStart )
        while theSplitStart do
                table.insert( outResults, string.sub( self, theStart, theSplitStart-1 ) )
                theStart = theSplitEnd + 1
                theSplitStart, theSplitEnd = string.find( self, inSplitPattern, theStart )
        end
        table.insert( outResults, string.sub( self, theStart ) )
        return outResults
end

local function node_id()
	local dev = "eth0"
	local mac = assert(fs.readfile("/sys/class/net/"..dev.."/address"))
	local hash = crc.hash(mac)
	return math.floor(hash / 256), hash % 256
end

local function mac_id()
	local dev = "eth0"
	local mac = assert(fs.readfile("/sys/class/net/"..dev.."/address"))
	local id = string.format("%s%s%s",string.sub(mac,10,11),string.sub(mac, 13, 14),string.sub(mac, 16, 17))
	return id
end

local function get_hostname()
	local hostname = string.format("wibed-%s",mac_id())
	return hostname
end

local function shell(cmd, raw)
	local f = assert(io.popen(cmd, 'r'))
	local s = assert(f:read('*a'))
	f:close()
	if raw then return s end
	s = string.gsub(s, '^%s+', '')
	s = string.gsub(s, '%s+$', '')
	s = string.gsub(s, '[\n\r]+', ' ')
	return s
end

local function readfile(file)
	local f = io.open(file,"r")
	local content = nil
	if f ~= nil then
		content = f:read('*a')
		f:close()
	end
	return content
end

local function get_model()
	local model = readfile("/tmp/sysinfo/board_name")
	if model == nil then
		model = shell("uname -m",true).."-"..shell("uname -p",true)
	end
	return model
end

local function hex(x) return string.format("%02x", x) end

local function generate_address()
	local r1, r2 = node_id()
	local ipv4_template = assert(x:get(ucic, "management", "ipv4_net"))
	local ipv6_template = assert(x:get(ucic, "management", "ipv6_net"))

	return ipv4_template:gsub("R1", r1):gsub("R2", r2),
	       ipv6_template:gsub("R1", hex(r1)):gsub("R2", hex(r2)) 
-- XXX: id should be hex coded but for backwards compat keep it decimal
end

local function generate_mgmt_lan_address()
	local r1, r2 = node_id()
	local ipv4_template = assert(x:get(ucic, "management", "ipv4_lan_net"))
	return ipv4_template:gsub("R1", r1):gsub("R2", r2)
end

local function generate_ssid()
	local ssid = assert(x:get(ucic, "management", "ssid"))
	local id = mac_id()
	return string.format("%s-%s",ssid, id)
end

local function get_bssid()
	return x:get(ucic, "management","bssid") or "02:CA:FF:EE:BA:BE"
end


local function printf(fmt, ...)
	print(string.format(fmt, ...))
end

local function printr(r)
	local i,v
	for i,v in ipairs(r) do
		printf("%d -> %s",i,v)
	end
end

local function is_net(d)
	-- get the physical ethernet device if dev is a vlan
	local dev = d:split_str("%.")
	local fdev
        if dev[1] == nil then
                fdev = d
        else
                fdev = dev[1]
        end
	local r = os.execute(string.format("ls /sys/class/net/%s >/dev/null 2>&1",fdev))
	return r==0
end

local function is_wifi(dev)
	local r1 = os.execute(string.format("ls /sys/class/net/%s/phy80211/ >/dev/null 2>&1",dev))
	local r2 = os.execute(string.format("cat /tmp/wireless.backup | egrep 'ifname|wifi-device' | grep %s >/dev/null 2>&1",dev))
	return (r1==0 or r2==0)
end

local function reset_wifi()
	print("Reconfiguring wifi devices...")
	os.execute("cp -f /etc/config/wireless /tmp/wireless.backup")
	os.execute('echo "" > /etc/config/wireless')
	os.execute('wifi detect > /etc/config/wireless')
end

local function wifi_up()
	os.execute("wifi")
end

-- returns two tables, first one with the ethernet devices, second one with wifi
local function split_ifaces(ifaces)
	local _,i
	local et = {}
	local wi = {}
	local valid_ifaces = {}
	
	for _,iface in ipairs(ifaces) do
		-- split by / and get the first existing iface
		local ifaces_t = iface:split_str("/")
		for j = 1, #ifaces_t do
                        if is_wifi(ifaces_t[j]) then
                                table.insert(wi,ifaces_t[j])
                                break
                        else
                        if is_net(ifaces_t[j]) then
                                table.insert(et,ifaces_t[j])
                                break
                        end
                        end
                end
        end
	return et,wi
end

local fwDelRules = {'Allow-DHCP-Renew', 'Allow-Ping', 'Allow-DHCPv6', 'Allow-ICMPv6-Input', 'Allow-ICMPv6-Forward'}
local function ftToDel(rule)
    for _,name in pairs(fwDelRules) do
        if name == rule then
            return true
        end
    end
    return false
end


local function set_batadv(dev)
	printf("-> Configuring batman-adv for %s ",dev)
	local ifn = "bat"..dev
	x:set("batman-adv","bat0","mesh")
	x:set("batman-adv","bat0","bridge_loop_avoidance","1")
	x:set("batman-adv","bat0","orig_interval","5000")
	x:set("batman-adv","bat0","distributed_arp_table","0")
	x:set("network",ifn,"interface")
--	x:set("network",ifn,"ifname",dev)
	x:set("network",ifn,"proto","batadv")
	x:set("network",ifn,"mesh","bat0")
	-- Commented to be applied always	
	-- if is_wifi(dev) then
	x:set("network",ifn,"mtu","1532")
	-- end
end

local function set_mgmt_net()
	print("Configuring management ethernet devices")
	local ifaces,_ = split_ifaces(x:get(ucic, "management", "ifaces"))
	local _,i
	for _,i in ipairs(ifaces) do print("-> Interface "..i) end
	
	table.insert(ifaces,"bat0")
	local ipv4, ipv6 = generate_address()

	x:set("network", "mgmt", "interface")
	x:set("network", "mgmt", "type","bridge")
	x:set("network", "mgmt", "proto", "static")
	x:set("network", "mgmt", "ipaddr", ipv4)
	x:set("network", "mgmt", "netmask", "255.255.0.0")
	x:set("network", "mgmt", "ip6addr", ipv6)
	x:set("network", "mgmt", "ifname", ifaces)
end
	
local function set_mgmt_lan()
	if x:get("wibed","management","is_gw") == "1" then
		print("Configuring node as Internet gateway...")
		local ipv4 = generate_mgmt_lan_address()
		 -- BATMANT-ADV GW CONFIGURATION:
                x:set("batman-adv", "bat0", "gw_mode", "server")

		x:set("network", "mgmt_lan", "interface")
		x:set("network", "mgmt_lan", "proto", "static")
		x:set("network", "mgmt_lan", "ipaddr", ipv4)
		x:set("network", "mgmt_lan", "netmask", "255.255.255.0")
		x:set("network", "mgmt_lan", "ifname", "br-mgmt")
	
		x:set("dhcp","mgmt_lan","dhcp")
		x:set("dhcp","mgmt_lan","interface","mgmt_lan")
		x:set("dhcp","mgmt_lan","start","2")
		x:set("dhcp","mgmt_lan","limit","250")
		x:set("dhcp","mgmt_lan","leasetime","1h")
		
		x:foreach("firewall", "zone", function(s)
			if x:get("firewall",s[".name"],"name") == "lan" then
				 x:set("firewall",s[".name"],"network",{"mgmt_lan"})
			end
		end)
        
        -- Disable uneccesary default firewall rules
        local bool = 0
        x:foreach("firewall","rule",function(s)
            if ftToDel(x.get("firewall",s[".name"],"name")) then
                x:set("firewall",s[".name"],"enabled", "0")
            end
            if x.get("firewall",s[".name"],"name") == "Deny-WAN-DNS" then
                bool = 1
            end
        end)

        -- Add rule for blcoking dns amplification (dnsmasq)
        -- if it doesnt exist yet
        if bool == 0 then
            local rule = x:add("firewall","rule")
            x:set("firewall",rule,"name","Deny-WAN-DNS")
            x:set("firewall",rule,"src","wan")
            x:set("firewall",rule,"dest_port","53")
            x:set("firewall",rule,"proto","udp")
            x:set("firewall",rule,"target","REJECT")
        end
	else
		-- BATMANT-ADV CLIENT CONFIGURATION:
                x:set("batman-adv", "bat0", "gw_mode", "client")

		x:set("network", "mgmt_lan", "interface")
		x:set("network", "mgmt_lan", "proto", "dhcp")
		x:set("network", "mgmt_lan", "ifname", "br-mgmt")
	end
	
	x:foreach("firewall", "zone", function(s) x:set("firewall", s[".name"],"input","ACCEPT") end)
	x:foreach("firewall", "zone", function(s) x:set("firewall", s[".name"],"output","ACCEPT") end)
	x:foreach("firewall", "zone", function(s) x:set("firewall", s[".name"],"forward","ACCEPT") end)
end

local function set_system()
	print("Configuring system...")
	-- Setting hostname
	local hostname = get_hostname()

	x:foreach("system", "system", function(s)
		x:set("system", s[".name"], "hostname", hostname)
	end)

	fs.writefile("/proc/sys/kernel/hostname", hostname)

	-- Setting model name
	x:set(ucic,"upgrade","model",get_model())
	x:set(ucic,"general","node_id",hostname)
end


local function clean()
	print("Clearing wireless config...")
	x:foreach("wireless", "wifi-iface", function(s) x:delete("wireless", s[".name"]) end)

	print("Clearing network config...")
	x:foreach("network", "interface", function(s)
		if s[".name"]:match("^mgmt") or s[".name"]:match("^lan") or s[".name"]:match("^bat") then
			x:delete("network", s[".name"])
		end
	end)
end

local function exec_hooks()
	-- TODO
	print("Executing hooks ...")
	local hooks = {"a","b"}
	local _, p
	for _, p in ipairs(hooks) do
		local cmd = string.format("sh /etc/wibed/hooks/%s.sh")
		printf("-> Calling %s", cmd)
		os.execute(cmd)
	end
end

local function set_mgmt_wifi()
	print("Configuring management wifi devices")
	local channel5 = assert(x:get(ucic, "management", "channel5"))
	local txpower2 = x:get(ucic, "management", "txpower2") or "30"
	local txpower5 = x:get(ucic, "management", "txpower5") or "20"
	local mrate = x:get(ucic, "management", "mrate") or nil
	local countrycode = x:get(ucic, "management", "country") or nil
	local channel2 = assert(x:get(ucic, "management", "channel2"))
	local i,_
	local _,ifaces = split_ifaces(x:get(ucic, "management", "ifaces"))
	local wifi_num = 0
    local proto = x:get(ucic,"management","l2proto") or "adhoc"

	for _,i in ipairs(ifaces) do
		print("-> Interface " .. i)
		local id = string.format("mgmt%d", wifi_num)
		local net = "bat"..id

		local t = iw.type(i)
		if t then
			local is_5ghz = iw[t].hwmodelist(i).a

			if is_5ghz then ch=channel5
			else  ch=channel2 end

			if not ch then
				printf("-> No channel defined for %dGHz %s", is_5ghz and 5 or 2, i)
				return
			end

			local ht = ch:match("[-+]?$")

			printf("-> Using channel %s for %dGHz %s", ch, is_5ghz and 5 or 2, i)
			x:set("wireless", i, "channel", (ch:gsub("[-+]$", "")))

			if x:get("wireless", i, "ht_capab") then
				if ht == "+" or ht == "-" then
					x:set("wireless", i, "htmode", "HT40"..ht)
				else
					x:set("wireless", i, "htmode", "HT20")
				end
			end

			x:set("wireless", i, "disabled", 0)
			if is_5ghz then
				x:set("wireless", i, "txpower", txpower5)
				printf("-> Using txpower %s for 5GHz", txpower5)
			else
				x:set("wireless", i, "txpower", txpower2)
				printf("-> Using txpower %s for 2GHz", txpower2)
			end
			if countrycode ~= nil then
				x:set("wireless", i, "country", countrycode)
				printf("-> Using countrycode %s", countrycode)
			end
			if mrate ~= nil then
				x:set("wireless", i, "mcast_rate", mrate)
				printf("-> Using multicast rate %s", mrate)
			end

            if proto == "adhoc" then
                printf("-> Chosen batman-adv for L2 mgmt protocol")
			    x:set("wireless", id, "wifi-iface")
			    x:set("wireless", id, "hidden", 1)
			    x:set("wireless", id, "ssid", generate_ssid())
			    x:set("wireless", id, "bssid", get_bssid())
			    x:set("wireless", id, "device", i)
			    x:set("wireless", id, "network", net)
			    x:set("wireless", id, "mode", "adhoc")
			    x:set("wireless", id, "ifname", id)
			elseif proto == "mesh" then
                printf("-> Chosen 802.11s for L2 mgmt protocol")
			    if x:get("wireless",i,"type") ~= "mac80211" then
			        printf("-> Error, device %s does not support 802.11s", i)
                    error()
                end
			    x:set("wireless", id, "wifi-iface")
			    x:set("wireless", id, "hidden", 1)
			    x:set("wireless", id, "device", i)
			    x:set("wireless", id, "ssid", generate_ssid())
			    x:set("wireless", id, "network", net)
			    x:set("wireless", id, "mode", "mesh")
			    x:set("wireless", id, "mesh_id", "wibed")
			    x:set("wireless", id, "mesh_fwding", 0)
			    x:set("wireless", id, "ifname", id)
            end

			set_batadv(id)
	
			wifi_num = wifi_num + 1
		else 
			printf("-> Error, device %s not found as WiFi interface", i)
		end	
	end
end

function set_location()
	local coordx = x:get(ucic, "general", "coordx")
	local coordy = x:get(ucic, "general", "coordy")
	local coordz = x:get(ucic, "general", "coordz")

	x:set(ucil, "location", "latitude", coordx)
	x:set(ucil, "location", "longitude", coordy)
	x:set(ucil, "location", "elev", coordz)
end


function main()
	reset_wifi()
	clean()
	set_mgmt_wifi()
	set_mgmt_net()
	set_mgmt_lan()
	set_system()
	set_location()

	print("Committing config files...")
	x:save("network")
	x:save("batman-adv")
	x:save(ucic)
	x:save("system")
	x:save("wireless")
	x:commit("network")
	x:commit("batman-adv")
	x:commit("wireless")
	x:commit("firewall")
	x:commit("dhcp")
	x:commit(ucic)
	x:commit(ucil)
	x:commit("system")
end

main()
