#!/usr/bin/lua

local crc = require "crc16"
local fs  = require "nixio.fs"
local uci = require "uci"
local iw  = require "iwinfo"
local ucic = "wibed"
local x = uci:cursor()

local function node_id()
	local dev = assert(x:get("wbm", "network", "primary_dev"))
	local mac = assert(fs.readfile("/sys/class/net/"..dev.."/address"))
	local hash = crc.hash(mac)
	return math.floor(hash / 256), hash % 256
end

local function generate_address()
	local r1, r2 = node_id()
	local ipv4_template = assert(x:get(ucic, "management", "ipv4_net"))
	local ipv6_template = assert(x:get(ucic, "management", "ipv6_net"))

	local function hex(x) return string.format("%02x", x) end

	return ipv4_template:gsub("R1", r1):gsub("R2", r2),
	       ipv6_template:gsub("R1", hex(r1)):gsub("R2", hex(r2)) 
-- XXX: id should be hex coded but for backwards compat keep it decimal
end

local function generate_ssid()
	local id = assert(x:get(ucic, "management", "ssid"))
	local r1, r2 = node_id()
	return string.format("%s-%02x%02x", id, r1, r2)
end

local function set_hostname()
	local r1, r2 = node_id()
	local hostname = string.format("wibed-%02x%02x", r1, r2)

	x:foreach("system", "system", function(s)
		x:set("system", s[".name"], "hostname", hostname)
	end)
	x:save("system")
	x:commit("system")

	fs.writefile("/proc/sys/kernel/hostname", hostname)
end

local function printf(fmt, ...)
	print(string.format(fmt, ...))
end

local function printr(r)
	local i,v
	for i,v in ipairs(r) do
		printf("%d -> %s",i,v)
	end
end

local function split_ifaces(ifaces)
	local _,i,r
	local et = {}
	local wi = {}
	for _,i in ipairs(ifaces) do
		r = os.execute(string.format("ls /sys/class/net/%s/phy80211/ >/dev/null 2>&1",i))
		if r == 0 then table.insert(wi,i)
		else table.insert(et,i) 
		end
	end
	return et,wi
end

local function reset_wifi()
	print("Reconfiguring wifi devices...")
	os.execute('echo "" > /etc/config/wireless')
	os.execute('wifi detect | grep -v disable > /etc/config/wireless')
	os.execute('wifi >/dev/null 2>&1')
end

local function set_mgmt_net()
	print("Configuring management network devices")
	local ifaces,_ = split_ifaces(x:get(ucic, "management", "ifaces"))
	local ipv4, ipv6 = generate_address()

	x:set("network", "mgmt", "interface")
	x:set("network", "mgmt", "type","bridge")
	x:set("network", "mgmt", "proto", "static")
	x:set("network", "mgmt", "ipaddr", ipv4)
	x:set("network", "mgmt", "netmask", "255.255.0.0")
	x:set("network", "mgmt", "ip6addr", ipv6)
	x:set("network", "mgmt", "ifname", ifaces)
	
	x:set("network", "mgmt_rescue", "interface")
	x:set("network", "mgmt_rescue", "proto", "static")
	x:set("network", "mgmt_rescue", "ipaddr", "192.168.1.1")
	x:set("network", "mgmt_rescue", "netmask", "255.255.255.0")
	x:set("network", "mgmt_rescue", "ifname", "br-lan")
end

local function clean()
	print("Clearing wireless config...")
	x:foreach("wireless", "wifi-iface", function(s) x:delete("wireless", s[".name"]) end)

	print("Clearing network config...")
	x:foreach("network", "interface", function(s)
		if s[".name"]:match("^mgmt$") or s[".name"]:match("^lan_") then
			x:delete("network", s[".name"])
		end
	end)
	x:foreach("network", "switch_vlan", function(s) x:delete("network", s[".name"]) end)
	x:foreach("network", "switch", function(s) x:delete("network", s[".name"]) end)
	x:delete("network", "wan")
	x:delete("network", "wan6")
	x:delete("network", "mgmt")
	x:delete("network", "lan")

end

local function exec_hooks()
	-- TODO
	print("Executing hooks ...")
	local hooks = {"a","b"}
	local _, p
	for _, p in ipairs(hooks) do
		local cmd = string.format("sh /etc/wibed/hooks/%s.sh")
		printf("-> Calling %s", cmd)
		os.execute(cmd)
	end
end

local function set_mgmt_wifi()
	print("Configuring management wifi devices")
	local channel5 = assert(x:get(ucic, "management", "channel5"))
	local ch = assert(x:get(ucic, "management", "channel2"))
	local wifi_num = 1
	local _,ifaces = split_ifaces(x:get(ucic, "management", "ifaces"))	

	x:foreach("wireless", "wifi-device", function(s)
		local t = iw.type(s[".name"])
		if not t then return end

		local is_5ghz = iw[t].hwmodelist(s[".name"]).a

		if is_5ghz then ch=channel5 end

		local id = string.format("mgmt%d", wifi_num)
		local net = "mgmt"
		local ifn = string.format("mgmt%d", wifi_num)

		if not ch then
			printf("-> No channel defined for %dGHz %s", is_5ghz and 5 or 2, s[".name"])
			return
		end

		local ht = ch:match("[-+]?$")

		printf("-> Using channel %s for %dGHz %s", ch, is_5ghz and 5 or 2, s[".name"])
		x:set("wireless", s[".name"], "channel", (ch:gsub("[-+]$", "")))

		if x:get("wireless", s[".name"], "ht_capab") then
			if ht == "+" or ht == "-" then
				x:set("wireless", s[".name"], "htmode", "HT40"..ht)
			else
				x:set("wireless", s[".name"], "htmode", "HT20")
			end
		end

		x:set("wireless", s[".name"], "disabled", 0)
		x:set("wireless", id, "wifi-iface")
		x:set("wireless", id, "device", s[".name"])
		x:set("wireless", id, "network", net)
		x:set("wireless", id, "ifname", ifn)

		wifi_num = wifi_num + 1
		
	end)


end

function main()
	local r1, r2 = node_id()
	local batch = { }

	reset_wifi()
	clean()
	
	set_mgmt_net()
	set_mgmt_wifi()

	print("Committing config files...")
	x:save("network")
	x:save("wireless")
	x:commit("network")
	x:commit("wireless")

	print("Configuring system...")
	set_hostname()
end

main()
